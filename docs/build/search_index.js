var documenterSearchIndex = {"docs":
[{"location":"#","page":"-","title":"-","text":"Modules = [MPSDynamics]","category":"page"},{"location":"#Main.MPSDynamics.chaincoeffs_ohmic","page":"-","title":"Main.MPSDynamics.chaincoeffs_ohmic","text":"chaincoeffs_ohmic(nummodes, α, s, beta=\"inf\"; wc=1, soft=false)\n\nGenerate chain coefficients for an Harmonic bath coupled to a spin-1/2 with spectral density given by: \n\nsoft cutoff: J(ω) = 2παω_c (fracωω_c)^s exp(-ωω_c) \n\nhard cutoff: J(ω) = 2παω_c (fracωω_c)^s θ(ω-ω_c)\n\nThe Hamiltonian is given by:\n\nH = fracω_02σ_z + Δσ_x + σ_xsum_kg_k(b_k^dagger+b_k) + sum_kω_kb_k^dagger b_k\n\nAnd the spectral density is defined by:\n\nJ(ω)  πsum_kg_k^2δ(ω-ω_k)\n\n\n\n\n\n","category":"function"},{"location":"#Main.MPSDynamics.measure1siteoperator-Tuple{Array{T,1} where T,Any,Array{Int64,1}}","page":"-","title":"Main.MPSDynamics.measure1siteoperator","text":"measure1siteoperator(A, O)\n\nFor a list of tensors A representing a right orthonormalized MPS, compute the local expectation value of a one-site operator O for every site or just one if i is specified.\n\nFor calculating operators on single sites this will be more efficient if the site is on the left of the mps.\n\n\n\n\n\n","category":"method"},{"location":"#Main.MPSDynamics.measure2siteoperator-Tuple{Array{T,1} where T,Any,Any,Int64,Int64}","page":"-","title":"Main.MPSDynamics.measure2siteoperator","text":" measure2siteoperator(A::Vector, M1, M2, j1, j2)\n\nCaculate expectation of M1*M2 where M1 acts on site j1 and M2 acts on site j2, assumes A is right normalised.\n\n\n\n\n\n","category":"method"},{"location":"#Main.MPSDynamics.physdims-Tuple{Array{T,1} where T}","page":"-","title":"Main.MPSDynamics.physdims","text":"physdims(M)\n\nReturn the physical dimensions of an MPS or MPO M.\n\n\n\n\n\n","category":"method"},{"location":"#Main.MPSDynamics.productstatemps","page":"-","title":"Main.MPSDynamics.productstatemps","text":"productstatemps(N::Int, d::Int, Dmax=1; state=:Vacuum, mpsorthog=:Right)\n\nReturn an N-site MPS with all local Hilbert space dimensions given by d. \n\n\n\n\n\n","category":"function"},{"location":"#Main.MPSDynamics.productstatemps","page":"-","title":"Main.MPSDynamics.productstatemps","text":"productstatemps(physdims::Dims, Dmax=1; state=:Vacuum, mpsorthog=:Right)\n\nReturn an MPS representing a product state with local Hilbert space dimensions given by physdims.\n\nBy default all bond-dimensions will be 1 since the state is a product state. However, to embed the product state in a manifold of greater bond-dimension, Dmax can be set accordingly.\n\nThe indvidual states of the MPS sites can be provdided by setting state to a list of column vectors. Setting state=:Vacuum will produce an MPS in the vacuum state (where the state of each site is represented by a column vector with a 1 in the first row and zeros elsewhere). Setting state=:FullOccupy will produce an MPS in which each site is fully occupied (ie. a column vector with a 1 in the last row and zeros elsewhere).\n\nThe argument mpsorthog can be used to set the gauge of the resulting MPS.\n\n\n\n\n\n","category":"function"},{"location":"#Main.MPSDynamics.Radial","page":"-","title":"Main.MPSDynamics.Radial","text":"Tree iterators:\n\n\n\n\n\n","category":"type"},{"location":"#Main.MPSDynamics.addchild!-Tuple{Main.MPSDynamics.Tree,Int64}","page":"-","title":"Main.MPSDynamics.addchild!","text":"addchild!(tree::Tree, id::Int)\n\nAdd child to node id of tree.\n\n\n\n\n\n","category":"method"},{"location":"#Main.MPSDynamics.addchildren!-Tuple{Main.MPSDynamics.Tree,Int64,Int64}","page":"-","title":"Main.MPSDynamics.addchildren!","text":"addchildren!(tree::Tree, id::Int, n::Int)\n\nAdd n children to node id of tree.\n\n\n\n\n\n","category":"method"},{"location":"#Main.MPSDynamics.chainmps-Tuple{Int64,Array{Int64,1},Int64}","page":"-","title":"Main.MPSDynamics.chainmps","text":"chainmps(N::Int, sites::Vector{Int}, numex::Int)\n\nGenerate an MPS with numex excitations of an equal super-position over sites\n\n\n\n\n\n","category":"method"},{"location":"#Main.MPSDynamics.chainmps-Tuple{Int64,Int64,Int64}","page":"-","title":"Main.MPSDynamics.chainmps","text":"chainmps(N::Int, site::Int, numex::Int)\n\nGenerate an MPS with numex excitations on site\n\nThe returned MPS will have bond-dimensions and physical dimensions numex+1\n\n\n\n\n\n","category":"method"},{"location":"#Main.MPSDynamics.chainprop-Tuple{Any,Any}","page":"-","title":"Main.MPSDynamics.chainprop","text":"chainprop(t, cparams...)\n\nPropagate an excitation placed initially on the first site of a tight-binding chain with parameters given by cparams for a time t and return occupation expectation for each site.\n\n\n\n\n\n","category":"method"},{"location":"#Main.MPSDynamics.dynamap-NTuple{4,Any}","page":"-","title":"Main.MPSDynamics.dynamap","text":"dynamap(ps1,ps2,ps3,ps4)\n\nCalulate complete dynamical map to time step at which ps1, ps2, ps3 and ps4 are specified.\n\n\n\n\n\n","category":"method"},{"location":"#Main.MPSDynamics.elementmpo-Tuple{Any,Vararg{Any,N} where N}","page":"-","title":"Main.MPSDynamics.elementmpo","text":"elementmpo(M, el...)\n\nReturn the element of the MPO M for the set of physical states el...\n\n\n\n\n\n","category":"method"},{"location":"#Main.MPSDynamics.elementmps-Tuple{Any,Vararg{Any,N} where N}","page":"-","title":"Main.MPSDynamics.elementmps","text":"elementmps(A, el...)\n\nReturn the element of the MPS A for the set of physical states el...\n\nExamples\n\njulia> A = chainmps(6, [2,4], 1);\n\njulia> elementmps(A, 1, 2, 1, 1, 1, 1)\n0.7071067811865475\n\njulia> elementmps(A, 1, 1, 1, 2, 1, 1)\n0.7071067811865475\n\njulia> elementmps(A, 1, 2, 1, 2, 1, 1)\n0.0\n\njulia> elementmps(A, 1, 1, 1, 1, 1, 1)\n0.0\n\n\n\n\n\n","category":"method"},{"location":"#Main.MPSDynamics.entanglemententropy-Tuple{Any}","page":"-","title":"Main.MPSDynamics.entanglemententropy","text":"entanglemententropy(A)\n\nFor a list of tensors A representing a right orthonormalized MPS, compute the entanglement entropy for a bipartite cut for every bond.\n\n\n\n\n\n","category":"method"},{"location":"#Main.MPSDynamics.findchild-Tuple{Main.MPSDynamics.TreeNode,Int64}","page":"-","title":"Main.MPSDynamics.findchild","text":"findchild(node::TreeNode, id::Int)\n\nReturn integer corresponding to the which number child site id is of node \n\n\n\n\n\n","category":"method"},{"location":"#Main.MPSDynamics.modemps","page":"-","title":"Main.MPSDynamics.modemps","text":"modemps(N::Int, k::Vector{Int}, numex::Int, chainparams=[fill(1.0,N), fill(1.0,N-1)])\n\nGenerate an MPS with numex excitations of an equal superposition of modes k of a tight-binding chain.\n\n\n\n\n\n","category":"function"},{"location":"#Main.MPSDynamics.modemps","page":"-","title":"Main.MPSDynamics.modemps","text":"modemps(N::Int, k::Int, numex::Int, chainparams=[fill(1.0,N), fill(1.0,N-1)])\n\nGenerate an MPS with numex excitations of mode k of a tight-binding chain. \n\nchainparams takes the form [e::Vector, t::Vector] where e are the on-site energies and t are the hoppping parameters.\n\nThe returned MPS will have bond-dimensions and physical dimensions numex+1\n\n\n\n\n\n","category":"function"},{"location":"#Main.MPSDynamics.mpsembed!-Tuple{Array{T,1} where T,Int64}","page":"-","title":"Main.MPSDynamics.mpsembed!","text":"mpsembed(A::Vector, Dmax::Int)\n\nEmbed MPS A in manifold of max bond-dimension Dmax\n\n\n\n\n\n","category":"method"},{"location":"#Main.MPSDynamics.mpsleftnorm!","page":"-","title":"Main.MPSDynamics.mpsleftnorm!","text":"mpsleftnorm!(A::Vector, jq::Int=length(A))\n\nLeft orthoganalise MPS A up to site jq.\n\n\n\n\n\n","category":"function"},{"location":"#Main.MPSDynamics.mpsmixednorm!-Tuple{Array{T,1} where T,Int64}","page":"-","title":"Main.MPSDynamics.mpsmixednorm!","text":"mpsmixednorm!(A::Vector, OC::Int)\n\nPut MPS A into mixed canonical form with orthogonality centre on site OC.\n\n\n\n\n\n","category":"method"},{"location":"#Main.MPSDynamics.mpsmixednorm!-Tuple{Main.MPSDynamics.TreeNetwork,Int64}","page":"-","title":"Main.MPSDynamics.mpsmixednorm!","text":"mpsmixednorm!(A::TreeNetwork, id::Int)\n\nNormalise tree-MPS A such that orthogonality centre is on site id.\n\n\n\n\n\n","category":"method"},{"location":"#Main.MPSDynamics.mpsmoveoc!-Tuple{Main.MPSDynamics.TreeNetwork,Int64}","page":"-","title":"Main.MPSDynamics.mpsmoveoc!","text":"mpsmoveoc!(A::TreeNetwork, id::Int)\n\nMove the orthogonality centre of right normalised tree-MPS A to site id.\n\nThis function will be more efficient than using mpsmixednorm! if the tree-MPS is already right-normalised.\n\n\n\n\n\n","category":"method"},{"location":"#Main.MPSDynamics.mpsrightnorm!","page":"-","title":"Main.MPSDynamics.mpsrightnorm!","text":"mpsrightnorm!(A::Vector, jq::Int=1)\n\nRight orthoganalise MPS A up to site jq.\n\n\n\n\n\n","category":"function"},{"location":"#Main.MPSDynamics.mpsrightnorm!-Tuple{Main.MPSDynamics.TreeNetwork}","page":"-","title":"Main.MPSDynamics.mpsrightnorm!","text":"mpsrightnorm!(A::TreeNetwork)\n\nWhen applied to a tree-MPS, right normalise towards head-node.\n\n\n\n\n\n","category":"method"},{"location":"#Main.MPSDynamics.mpsshiftoc!-Tuple{Main.MPSDynamics.TreeNetwork,Int64}","page":"-","title":"Main.MPSDynamics.mpsshiftoc!","text":"mpsshiftoc!(A::TreeNetwork, newhd::Int)\n\nShift the orthogonality centre by one site, setting new head-node newhd.\n\n\n\n\n\n","category":"method"},{"location":"#Main.MPSDynamics.normmps-Tuple{Array{T,1} where T}","page":"-","title":"Main.MPSDynamics.normmps","text":"normmps(A::Vector; mpsorthog=:None)\n\nCalculate norm of MPS A.\n\nSetting mpsorthog=:Right/:Left will calculate the norm assuming right/left canonical form. Setting mpsorthog=OC::Int will cause the norm to be calculated assuming the orthoganility center is on site OC. If mpsorthog is :None the norm will be calculated as an MPS-MPS product.\n\n\n\n\n\n","category":"method"},{"location":"#Main.MPSDynamics.normmps-Tuple{Main.MPSDynamics.TreeNetwork}","page":"-","title":"Main.MPSDynamics.normmps","text":"normmps(net::TreeNetwork; mpsorthog=:None)\n\nWhen applied to a tree-MPS mpsorthog=:Left is not defined.\n\n\n\n\n\n","category":"method"},{"location":"#Main.MPSDynamics.orthcentersmps-Tuple{Array{T,1} where T}","page":"-","title":"Main.MPSDynamics.orthcentersmps","text":"orthcentersmps(A)\n\nCompute the orthoganality centres of MPS A.\n\nReturn value is a list in which each element is the corresponding site tensor of A with the orthoganility centre on that site. Assumes A is right normalised.\n\n\n\n\n\n","category":"method"},{"location":"#Main.MPSDynamics.randisometry-Tuple{Type,Int64,Int64}","page":"-","title":"Main.MPSDynamics.randisometry","text":"randisometry([T=Float64], dims...)\n\nConstruct a random isometry\n\n\n\n\n\n","category":"method"},{"location":"#Main.MPSDynamics.randmps","page":"-","title":"Main.MPSDynamics.randmps","text":"randmps(tree::Tree, physdims, Dmax::Int, T::Type{<:Number} = Float64)\n\nConstruct a random, right-normalised, tree-MPS, with structure given by tree and max bond-dimension given by Dmax.\n\nThe local Hilbert space dimensions are specified by physdims which can either be of type Dims{length(tree)}, specifying the dimension of each site, or of type Int, in which case the same local dimension is used for every site.\n\n\n\n\n\n","category":"function"},{"location":"#Main.MPSDynamics.randmps","page":"-","title":"Main.MPSDynamics.randmps","text":"randmps(N::Int, d::Int, Dmax::Int, T=Float64)\n\nConstruct a random, N-site, right-normalised MPS with all local Hilbert space dimensions given by d.\n\n\n\n\n\n","category":"function"},{"location":"#Main.MPSDynamics.randmps-Union{Tuple{N}, Tuple{Tuple{Vararg{Int64,N}},Int64}, Tuple{Tuple{Vararg{Int64,N}},Int64,Type{#s5721} where #s5721<:Number}} where N","page":"-","title":"Main.MPSDynamics.randmps","text":"randmps(physdims::Dims{N}, Dmax::Int, T::Type{<:Number} = Float64) where {N}\n\nConstruct a random, right-normalised MPS with local Hilbert space dimensions given by physdims and max bond-dimension given by Dmax. \n\nT specifies the element type, eg. use T=ComplexF64 for a complex valued MPS.\n\n\n\n\n\n","category":"method"},{"location":"#Main.MPSDynamics.randtree-Tuple{Int64,Int64}","page":"-","title":"Main.MPSDynamics.randtree","text":"randtree(numnodes::Int, maxdegree::Int)\n\nConstruct a random tree with nummodes modes and max degree maxdegree.\n\n\n\n\n\n","category":"method"},{"location":"#Main.MPSDynamics.rmsd-Tuple{Any,Any}","page":"-","title":"Main.MPSDynamics.rmsd","text":"rmsd(dat1::Vector{Float64}, dat2::Vector{Float64})\n\nCalculate the root mean squared difference between two measurements of an observable over the same time period.\n\n\n\n\n\n","category":"method"},{"location":"#Main.MPSDynamics.svdmps-Tuple{Any}","page":"-","title":"Main.MPSDynamics.svdmps","text":"svdmps(A)\n\nFor a right normalised mps A compute the full svd spectrum for a bipartition at every bond.\n\n\n\n\n\n","category":"method"},{"location":"#Main.MPSDynamics.svdtrunc-Tuple{Any}","page":"-","title":"Main.MPSDynamics.svdtrunc","text":"U, S, Vd = svdtrunc(A; truncdim = max(size(A)...), truncerr = 0.)\n\nPerform a truncated SVD, with maximum number of singular values to keep equal to truncdim or truncating any singular values smaller than truncerr. If both options are provided, the smallest number of singular values will be kept. Unlike the SVD in Julia, this returns matrix U, a diagonal matrix (not a vector) S, and Vt such that A ≈ U * S * Vt\n\n\n\n\n\n","category":"method"}]
}
